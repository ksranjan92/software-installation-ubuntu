import software.amazon.awssdk.auth.credentials.DefaultCredentialsProvider
import software.amazon.awssdk.regions.Region
import software.amazon.awssdk.services.s3.S3Client
import software.amazon.awssdk.services.s3.model._

import scala.jdk.CollectionConverters._

object S3SelectExample extends App {
  val region = Region.US_EAST_1 // Change to your desired AWS region

  // Create an S3Client with default credentials provider
  val s3Client = S3Client.builder()
    .region(region)
    .credentialsProvider(DefaultCredentialsProvider.create())
    .build()

  // Specify the query to select data from S3
  val query = "SELECT * FROM S3Object s WHERE s.age > 30" // Use 'S3Object' instead of 's3object'

  // Define the request to select content from the S3 object
  val request = SelectObjectContentRequest.builder()
    .bucket("your-bucket-name")
    .key("your-object-key")
    .expression(query)
    .expressionType(ExpressionType.SQL) // Corrected expression type
    .inputSerialization(
      InputSerialization.builder()
        .json(JSONInput.builder().build()) // Input serialization for JSON data
        .build()
    )
    .outputSerialization(
      OutputSerialization.builder()
        .json(JSONOutput.builder().build()) // Output serialization for JSON data
        .build()
    )
    .build()

  // Define a handler to process the response events
  val handler = SelectObjectContentResponseHandler.builder()
    .recordsEventStreamHandler(consumer)
    .build()

  // Execute the request and handle the response
  val responseStream = s3Client.selectObjectContent(request, handler)

  // Process the response stream
  responseStream.forEach(event => {
    // Process each event
    if (event.records() != null) {
      println("Received records: " + event.records().payload().asUtf8String())
    } else if (event.progress() != null) {
      println("Received progress: " + event.progress().toString())
    } else if (event.stats() != null) {
      println("Received stats: " + event.stats().details().asScala.mkString(", "))
    } else if (event.cont() != null) {
      println("Received continuation token: " + event.cont().toString())
    } else if (event.end() != null) {
      println("Received end of stream")
    }
  })

  // Close the S3 client
  s3Client.close()
}
